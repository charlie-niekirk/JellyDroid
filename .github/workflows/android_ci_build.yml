# .github/workflows/android_ci_build.yml
name: Android CI - Build & Sign

on:
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    # Add permissions for the GITHUB_TOKEN to allow writing comments on pull requests.
    permissions:
      contents: read
      pull-requests: write

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Set up the Java Development Kit (JDK)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    # Step 3: Decode the base64 encoded keystore file from GitHub Secrets
    # The convention plugin will read the file path from the SIGNING_KEY_STORE_PATH environment variable.
    - name: Decode Keystore
      run: echo "${{ secrets.RELEASE_STORE_FILE }}" | base64 --decode > ${{ github.workspace }}/release.jks
      # This command decodes the secret and creates the keystore file with the .jks extension

    # Step 4: Make the Gradle wrapper executable
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # Step 5: Build and sign the APK and AAB files
    # This step exposes the secrets as environment variables.
    # Your convention plugin is set up to read these variables to configure the signing.
    - name: Build and Sign with Gradle
      env:
        SIGNING_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
        SIGNING_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        SIGNING_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
        # This path points to the keystore file created in the 'Decode Keystore' step
        SIGNING_KEY_STORE_PATH: ${{ github.workspace }}/release.jks
      run: ./gradlew assembleRelease bundleRelease

    # Step 6: Upload the signed APK file as a build artifact
    - name: Upload Signed APK artifact
      id: apk-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-signed
        path: app/build/outputs/apk/release/app-release.apk

    # Step 7: Upload the signed AAB file as a build artifact
    - name: Upload Signed AAB artifact
      id: aab-upload-step
      uses: actions/upload-artifact@v4
      with:
        name: release-aab-signed
        path: app/build/outputs/bundle/release/app-release.aab

    # Step 8: Post a comment on the Pull Request with links to the signed artifacts
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;

          const commentBody = `
          âœ… Build successful and signed!

          You can download the signed build artifacts here:
          - [APK](https://github.com/${owner}/${repo}/actions/runs/${context.runId}/artifacts/${steps.apk-upload-step.outputs.artifact-id})
          - [AAB](https://github.com/${owner}/${repo}/actions/runs/${context.runId}/artifacts/${steps.aab-upload-step.outputs.artifact-id})

          *Note: You need to be logged into GitHub to download the artifacts. These are release-signed builds.*
          `;

          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: commentBody
          });
