# .github/workflows/android-unit-tests.yml
#
# This GitHub Actions workflow runs specific Android unit tests based on the
# label applied to a pull request targeting the 'master' branch.

name: Run Unit Tests Based on Label

# This workflow is triggered on pull requests to the 'master' branch when they are
# opened, synchronized (new commits pushed), labeled, or unlabeled.
on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]
    branches:
      - master
      # You can also use 'main' or other default branches
      # - main

jobs:
  test:
    # Use the latest version of Ubuntu to run the job
    runs-on: ubuntu-latest

    # Add permissions for the GITHUB_TOKEN to allow writing comments to pull requests.
    permissions:
      pull-requests: write

    steps:
      # Step 1: Check out the repository's code
      # This action checks out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      # This is required to build and run an Android application.
      # You can change the Java version to match your project's requirements.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Set up Gradle cache
      # This step caches Gradle dependencies and build outputs to improve workflow execution time.
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Make gradlew executable
      # The gradlew script needs execute permissions to run.
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Step 5: Run unit tests for the 'home' module
      # This step will only run if the pull request has the 'home' label.
      # The 'contains' function checks if the array of label names includes 'home'.
      - name: Run :feature:home unit tests
        if: contains(github.event.pull_request.labels.*.name, 'home')
        run: ./gradlew :feature:home:testDebugUnitTest

      # Step 6: Run unit tests for the 'onboarding' module
      - name: Run :feature:onboarding unit tests
        if: contains(github.event.pull_request.labels.*.name, 'onboarding')
        run: ./gradlew :feature:onboarding:testDebugUnitTest

      # Step 7: Run unit tests for the 'mediaCollection' module
      # Note: Labels with spaces must be enclosed in single quotes.
      - name: Run :feature:mediaCollection unit tests
        if: contains(github.event.pull_request.labels.*.name, 'media collection')
        run: ./gradlew :feature:mediaCollection:testDebugUnitTest

      # Step 8: Run unit tests for the 'mediaPlayer' module
      - name: Run :feature:mediaPlayer unit tests
        if: contains(github.event.pull_request.labels.*.name, 'player')
        run: ./gradlew :feature:mediaPlayer:testDebugUnitTest

      # Step 9: Run unit tests for the 'mediaDetails' module
      - name: Run :feature:mediaDetails unit tests
        if: contains(github.event.pull_request.labels.*.name, 'media details')
        run: ./gradlew :feature:mediaDetails:testDebugUnitTest

      # Step 10: Run unit tests for the 'settings' module
      - name: Run :feature:settings unit tests
        if: contains(github.event.pull_request.labels.*.name, 'settings')
        run: ./gradlew :feature:settings:testDebugUnitTest

      # Step 11: Run all unit tests in the project
      # This is an optional step. It will run if the PR has the 'all-tests' label.
      # This can be useful for running a full regression test suite.
      - name: Run all unit tests
        if: contains(github.event.pull_request.labels.*.name, 'all-tests')
        run: ./gradlew testDebugUnitTest

      # Step 12: Post a comment if no test labels are found
      # This provides feedback to the PR author if they forgot to add a label.
      # It checks that none of the specified labels are present.
      - name: Notify if no test labels are found
        if: |
          !contains(github.event.pull_request.labels.*.name, 'home') &&
          !contains(github.event.pull_request.labels.*.name, 'onboarding') &&
          !contains(github.event.pull_request.labels.*.name, 'media collection') &&
          !contains(github.event.pull_request.labels.*.name, 'player') &&
          !contains(github.event.pull_request.labels.*.name, 'media details') &&
          !contains(github.event.pull_request.labels.*.name, 'settings') &&
          !contains(github.event.pull_request.labels.*.name, 'all-tests')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ No test-related labels found (e.g., `home`, `onboarding`, `media collection`, `player`, `media details`, `settings`, `all-tests`). No specific unit tests were run. Please add a label to trigger the corresponding test suite.'
            })
